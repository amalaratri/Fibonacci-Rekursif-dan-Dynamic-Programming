#include <iostream>
#include <chrono>
#include <vector>

int fibonacciRekursif(int n) {
    if (n <= 1) {
        return n;
    }
    return fibonacciRekursif(n - 1) + fibonacciRekursif(n - 2);
}

int fibonacciDP(int n) {
    std::vector<int> dp(n + 1);
    dp[0] = 0;
    if (n > 0) {
        dp[1] = 1;
    }
    for (int i = 2; i <= n; ++i) {
        dp[i] = dp[i - 1] + dp[i - 2];
    }
    return dp[n];
}

int main() {
    std::vector<int> testValues = {10, 25, 30, 40, 50};
    
    std::cout << "Mengukur waktu eksekusi fungsi Fibonacci:\n";
    
    for (int n : testValues) {
        // Mengukur waktu eksekusi untuk fungsi rekursif
        auto startRekursif = std::chrono::high_resolution_clock::now();
        int resultRekursif = fibonacciRekursif(n);
        auto endRekursif = std::chrono::high_resolution_clock::now();
        std::chrono::duration<double, std::milli> durationRekursif = endRekursif - startRekursif;

        auto startDP = std::chrono::high_resolution_clock::now();
        int resultDP = fibonacciDP(n);
        auto endDP = std::chrono::high_resolution_clock::now();
        std::chrono::duration<double, std::milli> durationDP = endDP - startDP;

        std::cout << "n = " << n << "\n";
        std::cout << "Rekursif: Hasil = " << resultRekursif << ", Waktu = " << durationRekursif.count() << " ms\n";
        std::cout << "Dynamic Programming: Hasil = " << resultDP << ", Waktu = " << durationDP.count() << " ms\n";
        std::cout << "------------------------------------\n";
    }
    
    return 0;
}
